p + geom_line(aes(group = country))
p <- ggplot(data = subset(oecd_le, country %in% c("New Zealand", "Mexico", "Japan", "Spain")), aes(x = year, y = lifeexp))
p + geom_line()
p + geom_line(aes(group = country)) + facet_wrap(~country, as.table = F)
p + geom_line(aes(group = country)) + facet_wrap(~country, as.table = T)
p + geom_line(aes(group = country)) + facet_wrap(~is_usa)
p <- ggplot(data = subset(oecd_le, country %in% c("New Zealand", "Mexico", "Japan", "Spain", "United States")), aes(x = year, y = lifeexp))
p + geom_line() + facet_wrap(~is_usa)
p + geom_line(aes(group = country)) + facet_wrap(~is_usa)
fac.labs <- c(other = "Non-USA OECD countries", usa = "USA")
p <- ggplot(data = oecd_le, mapping = aes(x = year, y = lifeexp))
p + geom_line(aes(group = country), color = "gray") + geom_smooth(linewidth = 1.5, se = FALSE) + facet_grip(~is_usa, labeller = labeller(is_usa = fac.labs))
p + geom_line(aes(group = country), color = "gray") + geom_smooth(linewidth = 1.5, se = FALSE) + facet_grid(~is_usa, labeller = labeller(is_usa = fac.labs))
p + geom_line(aes(group = country), color = "gray") + geom_smooth(linewidth = 1.5, se = FALSE) + facet_wrap(~is_usa, labeller = labeller(is_usa = fac.labs))
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) + geom_boxplot(aes(color = clarity)) + facet_wrap(~cut) + labs(x = "Clarity", y = "Price")
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) + geom_boxplot(aes(color = clarity)) + facet_wrap(~cut) + labs(x = "Clarity", y = "Price") + scale_y_log10(labels = scales::dollar)
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) + geom_boxplot(aes(color = clarity)) + facet_wrap(~cut) + labs(x = "Clarity", y = "log(Price)") + scale_y_log10(labels = scales::dollar)
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) + geom_boxplot(aes(color = clarity)) + facet_wrap(~cut) + labs(x = "Clarity", y = "log(Price)") + scale_y_log10(labels = scales::dollar) + scale_color_gradient(low = "brown", high = "green", trans = "log10")
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) + geom_boxplot(aes(color = clarity)) + facet_wrap(~cut) + labs(x = "Clarity", y = "log(Price)") + scale_y_log10(labels = scales::dollar) + scale_color_gradient(low = "brown", high = "green")
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) + geom_boxplot(aes(color = clarity)) + facet_wrap(~cut) + labs(x = "Clarity", y = "log(Price)") + scale_y_log10(labels = scales::dollar)
p <- ggplot(data = mpg)
p + geom_point(aes(x = displ, y = hwy)) + geom_smooth(aes(x = disp, y = hwy), se = FALSE)
p + geom_point(aes(x = displ, y = hwy)) + geom_smooth(aes(x = displ, y = hwy), se = FALSE)
p + geom_point(aes(x = displ, y = hwy)) + geom_smooth(aes(x = displ, y = hwy), se = FALSE) + facet_grid(drv ~ .)
p + geom_point(aes(x = displ, y = hwy)) + geom_smooth(aes(x = displ, y = hwy), se = FALSE) + facet_grid(. ~ drv)
p <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))
p + geom_point(aes(color = as.factor(year)))
p + geom_point(aes(color = as.factor(year))) + facet_grid(class ~ drive)
p + geom_point(aes(color = as.factor(year))) + facet_grid(class ~ drv)
View(mpg)
p + geom_point(aes(color = as.factor(year))) + facet_grid(class ~ drv)
mpg$class
str(mpg$class)
names(mpg$class)
factor(mpg$class)
mpg2 <- subset(mpg, cyl != 5 & drv %in% c("4", "f") & class != "2seater")
p <- ggplot(mpg2, aes(x = cty, y = hwy))
p <- ggplot(mpg2, aes(x = cty, y = hwy)) + geom_abline()
p
p <- ggplot(mpg2, aes(x = cty, y = hwy)) + geom_abline() + geom_jitter(width = 0.1, height = 0.1)
p
p + facet_wrap(~cyl)
p + facet_wrap(~cyl, scales = "free")
?economics_long
View(economics)
View(economics_long)
ggplot(economics_long, aes(date, value)) + geom_line() + facet_wrap(~variable)
ggplot(economics_long, aes(date, value)) + geom_line() + facet_wrap(~variable, nrow = 1)
ggplot(economics_long, aes(date, value)) + geom_line() + facet_wrap(~variable, nrow = 1, scales = "free_y")
ggplot(economics_long, aes(date, value)) + geom_line() + facet_wrap(~variable, ncol =  = 1, scales = "free_y")
ggplot(economics_long, aes(date, value)) + geom_line() + facet_wrap(~variable, ncol =  1, scales = "free_y")
?gapminder
library(gapminder)
?gapminder
ggplot(data = subset(gapminder, country %in% c("Australia", "New Zealand", "Korea", "Japan")), aes(x = gdpPercap, y = lifeExp))
ggplot(data = subset(gapminder, country %in% c("Australia", "New Zealand", "Korea", "Japan")), aes(x = gdpPercap, y = lifeExp)) + geom_point(color = continent)
View(gapminder)
ggplot(data = subset(gapminder, country %in% c("Australia", "New Zealand", "Korea", "Japan")), aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(color = continent, size = pop))
ggplot(data = subset(gapminder, country %in% c("Afghanistan", "Bahrain", "Brazil", "cambodia")), aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(color = continent, size = pop)) + geom_smooth(se = F) + facet_wrap(~continent)
ggplot(data = subset(gapminder, country %in% c("Afghanistan", "Bahrain", "Brazil", "cambodia")), aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop)) + geom_smooth(se = F) + facet_wrap(~continent)
ggplot(data = subset(gapminder, country %in% c("Afghanistan", "Bahrain", "Brazil", "cambodia")), aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop)) + geom_smooth(se = F) + facet_grid(country~continent)
ggplot(data = subset(gapminder, country %in% c("Afghanistan", "Bahrain", "Brazil", "cambodia")), aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop)) + geom_smooth(se = F) + facet_grid(year~continent)
ggplot(data = subset(gapminder, country %in% c("Afghanistan", "Bahrain", "Brazil", "cambodia")), aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop)) + geom_smooth(se = F) + facet_grid(year~continent~country)
knitr::opts_chunk$set(echo = TRUE)
library(maps)
library(ggplot2)
library(tidyverse)
maps::map("state", fill = T, col = palette())
maps::map("world", region = "Spain")
# Canada, Australia, Brazil, Italy, Japan, France, UK
maps::map("world", regions = "canada")
maps::map("world", regions = "")
maps::map("state", fill = TRUE, col = terrain.colors(49))
# the number here tells you how many colors in the palette to use
# maps::map("state", fill = TRUE, col = rainbow(49))
maps::map("state", fill = TRUE, col = heat.colors(49, alpha = 0.7))
maps::map(
"county",
"maryland",
fill = TRUE,
col = heat.colors(10, alpha = 0.5)
)
head(map_data("county", "maryland"))
md_counties <- map_data("county", "maryland") |>
select(
lon = long,
lat,
group,
id = subregion
)
str(md_counties)
ggplot(md_counties,
aes(x = lon, y = lat)
) +
geom_point(size = 0.2, aes(color = id)) +
coord_quickmap() + # line up longitude with latitude
labs(x = "Longitude", y = "Latitude", color = "County")
ggplot(md_counties,
aes(lon, lat, group = group)
) +
geom_polygon(color = "white", aes(fill = id)) +
coord_quickmap() +
theme_dark()
library(sf)
nc <- sf::st_read(
system.file("shape/nc.shp", package = "sf"),
quiet = TRUE
)
ggplot(nc) +
geom_sf() + # plots the polygon
coord_sf() # line up the longitudes```
ggplot(nc) +
geom_sf(aes(fill = SID74)) +
coord_sf() +
scale_fill_gradient(
low = "white",
high = "red"
) +
labs(
title = " Sudden Infant Death Syndrom by County in North Carolina 1974 ",
fill = "Sudden Infant Deaths\n in North Carolina 1974",
caption = "Source: nc.shp dataset"
)
library(scales)
ggplot(nc) +
geom_sf(aes(fill = (SID74/BIR74))) +
coord_sf() +
scale_fill_gradient(
low = "white",
high = "red",
labels = label_percent()
) +
labs(
title = "SID case density in North Carolina by county, 1974-1978",
caption = "Source: nc dataset from sf",
fill = "%(# cases)/(# new births)",
) +
theme(plot.title = element_text(hjust = 0.5)) # adjust the position of the title
range_values <- range(
c(
nc$SID74 / nc$BIR74,
nc$SID79 / nc$BIR79
),
na.rm = TRUE) # gives me the maximum range of the scale
p74 <- ggplot(nc) +
geom_sf(aes(fill = (SID74/BIR74))) +
coord_sf() +
scale_fill_gradient(
low = "white",
high = "red",
labels = label_percent(),
limits = range_values # specify the limits of the scale
)
p79 <- ggplot(nc) +
geom_sf(aes(fill = (SID79/BIR79))) +
coord_sf() +
scale_fill_gradient(
low = "white",
high = "red",
labels = label_percent(),
limits = range_values # specify the limits of the scale
)
library(patchwork)
p74 / p79
ggplot(nc) +
geom_sf(aes(fill = (SID79/BIR79)-(SID74/BIR74))) +
coord_sf() +
scale_fill_gradient2(
low = "green",
mid = "white",
high = "red",
labels = label_percent(),
)
library(ggrepel)
library(tidyverse)
# select the top five populous city in NC
nc_cities5 <- maps::us.cities |> filter(country.etc == "NC") |> arrange(desc(pop)) |> slice_head(n=5)
nc_cities5
options(repr.plot.width = 25, repr.plot.height = 14)
ggplot() +
geom_sf(data = nc,
aes(fill = (SID79/BIR79)-(SID74/BIR74))) +
coord_sf() +
scale_fill_gradient2(
low = "green",
mid = "white",
high = "red",
labels = label_percent(),
) +
geom_point(
data = nc_cities5,
mapping = aes(x = long, y = lat),
size = 2,
color = "purple"
) +
geom_text_repel(
data = nc_cities5,
mapping = aes(x = long, y = lat, label = name),
color = "black",
size = 2.5
)
md_counties <- map_data("county", "maryland")
head(md_counties)
md_counties <- md_counties |>
select(
lon = long,
lat,
group,
id = subregion
)
head(md_counties)
mdcovid <- read.csv("MDCOVID19_CasesByCounty.csv")
head(mdcovid)
county_sum <- colSums(mdcovid[, -c(1,2)]) # not summing the first (ID) or the second (timestamp) columns
county_sum
names(county_sum)
# change every character in names(county_sum) to lower-case
names(county_sum) <- tolower(names(county_sum))
# replace "_" by an empty space
names(county_sum) <- sub("_", " ", names(county_sum))
names(county_sum)
county_sum <- filter(data.frame(county_sum), county_sum!= 0)
county_sum
county_sum$id <- rownames(county_sum)
county_sum
md_counties <- left_join(
md_counties,
county_sum,
by = "id"
)
# md_counties$case_num <- md_counties$county_sum
head(md_counties)
library(scales)
ggplot(md_counties,
aes(lon, lat, group = group)
) +
geom_polygon(aes(fill = log(county_sum)), # using a log scale here
color = "black", linewidth = 0.2) +
coord_quickmap() +
scale_fill_gradient2(
low = "green",
mid = "white",
high = "red",
midpoint = log(median(md_counties$county_sum)), # re-center the scale
limits = log(c(min(md_counties$county_sum),  max(md_counties$county_sum))), # change the range
labels = math_format(10^.x) # make sure the legend is also in log scale
) +
labs(
fill = "Case Number",
title = "Covid cases by MD counties\n 03/15/2020 -- 10/22/2024",
caption = "Source: https://data.imap.maryland.gov"
)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(socviz)
oecd2 <- oecd_le |>
filter(country %in% c(
"Australia", "Sweden", "Spain", "United Kingdom"
))
ggplot(oecd2, aes(year, lifeexp, group = country)) + geom_path(aes(color = country)) +
labs(
x = "Year",
y = "Country",
title = "Life Expectency of the four\n Women' World Cup Semifinalists",
subtitle = "Source: OECD",
caption = "Data from 'socviz' package")
values <- seq(from = -10, to = 1, by = 0.01)
exp_df <- data.frame(x= values, y =sin(values)*exp(values))
ggplot(exp_df, aes(x,y)) +
geom_path() +
labs(y = quote(f(x)==sin(x)*e^x))
library(ggtext)
g <- ggplot(oecd2, aes(year, lifeexp, group = country)) + geom_path(aes(color = country)) + labs(
x = "**Year** from *1960-2015*",
y = "Country",
title = "Life Expectency of the four\n Women' World Cup Semifinalists",
subtitle = "Source: OECD",
caption = "Data from 'socviz' package")
g
g + theme(
axis.title.x = element_markdown() # convert the x-label into markdown format
)
library(gapminder)
ggplot(subset(gapminder, continent %in% c("Asia","Europe"))) +
scale_x_log10()+
geom_point(aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) +
geom_smooth(aes(x = gdpPercap, y = lifeExp, group = continent),se = FALSE)
ggplot(subset(gapminder, continent %in% c("Asia","Europe"))) +
scale_x_log10()+
geom_point(aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) +
geom_smooth(aes(x = gdpPercap, y = lifeExp, group = continent),se = FALSE) +
theme(plot.margin = margin(,2,,, "cm"))
library(ggrepel)
ggplot(subset(gapminder, continent %in% c("Asia","Europe"))) +
scale_x_log10()+
geom_point(aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) +
geom_smooth(aes(x = gdpPercap, y = lifeExp, group = continent),se = FALSE) +
theme(plot.margin = margin(,2,,, "cm")) +
geom_label_repel(
data = subset(
gapminder,
continent %in% c("Asia", "Europe") &
gdpPercap > 25000 &
lifeExp < 70),
mapping = aes(x = gdpPercap, y = lifeExp, label = country),
size = 1.5
)
ggplot(subset(gapminder, continent %in% c("Asia","Europe"))) +
scale_x_log10()+
geom_point(aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) +
geom_smooth(aes(x = gdpPercap, y = lifeExp, group = continent),se = FALSE) +
theme(plot.margin = margin(,2,,, "cm")) +
geom_label_repel(
data = subset(
gapminder,
continent %in% c("Asia", "Europe") &
gdpPercap > 25000 &
lifeExp < 70),
mapping = aes(x = gdpPercap, y = lifeExp, label = country)
) +
annotate(
geom = "rect",
xmin = 25000,
xmax = 100000,
ymin = 50,
ymax = 70,
alpha = 0.2,
fill = "red"
)
head(economics)
ggplot(economics,
aes(date, unemploy/pop)) + geom_line() + theme_bw()
presidential
presidential2 <- subset(presidential, start > economics$date[1])
presidential2
p <- ggplot(economics) + # divide the x-axis into intervals according to the party in charge
geom_rect(data = presidential2,
mapping = aes(
xmin = start,xmax = end,
ymin = -Inf,ymax = Inf,
fill = party,
),
alpha = 0.5
) +
scale_fill_manual(values = c("blue", "red")) +
geom_vline(data = presidential2,
mapping = aes(
xintercept = as.numeric(start)),
color = "black",
alpha = 0.4,
linetype = 2
) +
geom_line(economics, mapping = aes(date, unemploy/pop)) +
geom_text(
data = presidential2,
mapping = aes(x = start, y = 0 , label = name),
size = 4,
vjust = 0,
hjust = 0,
nudge_x = 800,
angle = 90
) +
labs(
x = "Years",
y = "Unemployment Rate",
title = "Unemployment rate over the years",
subtitle = "background according to party",
caption = "source: economics dataset in base R",
) +
theme_bw()
p
sticker <- paste(strwrap(
"While revolutionaries as individuals can be murdered, you cannot kill ideas. Great ideas are a tough mountain to climb. We are going to make a great leap forward. You can kill a man, but you cannot kill an idea. If we are going to transform the world, we must transform our minds first. -- Thomas Sankara, according to ChatGPT",45), collapse = "\n")
xrng <- range(economics$date)
yrng <- range(economics$unemploy / economics$pop)
p + annotate(
geom = "label",
x = xrng[1] + 11000,
y = yrng[2] - 0.006,
label = sticker,
hjust = 0.5, vjust = 0.5, size = 2
)
library(patchwork)
mpg_08 <- mpg |> filter(year == 2008)
base_08 <- ggplot(mpg_08, aes(displ, hwy)) + geom_point()
base_08
p08_1 <- base_08 +
scale_x_continuous(limits = c(1,7)) + # change the x-limits to [1,7]
scale_y_continuous(limits = c(10,45)) # change the y-limits to [10,45]
p08_2 <- base_08 +
scale_x_continuous(limits = c(2,5)) +
scale_y_continuous(limits = c(20,40))
p08_1 | p08_2
base <- ggplot(mpg, aes(drv, hwy)) +
geom_hline(yintercept = 28, colour = "red") +
geom_boxplot()
base
base | base + coord_cartesian() | (base + coord_cartesian() + ylim(10,35)) | (base + coord_cartesian(ylim = c(10,35)))| (base + coord_cartesian(ylim = c(10,35)) + ylim(10,35))
library(gapminder)
ggplot(subset(gapminder, continent %in% c("Asia","Europe"))) +
scale_x_log10()+
geom_point(aes(x = gdpPercap, y = lifeExp, color = continent), size = 0.2 )
break_point = seq(from= 10000, to = 100000, by = 10000)
ggplot(subset(gapminder, continent %in% c("Asia","Europe"))) +
scale_x_log10()+
geom_point(aes(x = gdpPercap, y = lifeExp, color = continent), size = 0.2 ) +
scale_x_log10(breaks = break_point)
library(scales)
(ggplot(economics, aes(date, unemploy/pop)) +
geom_line() +
theme_bw()) |
(ggplot(economics, aes(date, unemploy/pop)) +
geom_line() +
theme_bw() +
scale_y_continuous(breaks = breaks_pretty(n = 10)) +
scale_x_date(breaks = breaks_pretty(n = 10))
)
(ggplot(economics, aes(date, unemploy/pop)) +
geom_line() +
theme_bw() +
scale_x_date(date_breaks = "5 years")) |
(ggplot(economics, aes(date, unemploy/pop)) +
geom_line() +
theme_bw() +
scale_x_date(breaks = breaks_width("5 years")))
gm07 <- subset(gapminder, year == 2007)
ggplot(gm07, aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(color = continent), size = 1) +
scale_x_log10(labels = label_dollar()) +
theme_minimal()
econ_base <- ggplot(economics, aes(date, psavert)) + geom_line(na.rm = T)
econ_base
econ_base + scale_x_date(
date_breaks = "5 years",
date_labels = "%y"
)
econ_base + scale_x_date(
date_breaks = "5 years",
date_labels = "%b %y"
)
set.seed(2024)
diamonds2 <- diamonds[sample(nrow(diamonds), 300), ]
p <- ggplot(diamonds2, aes(carat, price)) + geom_point(aes(color = color))
p
p + scale_color_brewer(
name = "Diamond\ncolor", # texts in the legend
palette = "Greens" # color palette from RColorBrewer
)
pgreen <- p + scale_color_brewer(name = "Diamond\ncolor", palette = "Greens" ) + theme_dark()
pspec <- p + scale_color_brewer(name = "Diamond\ncolor", palette = "Spectral") + theme_dark()
pgreen | pspec
library(sf)
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = SID74)) +
coord_sf() +
scale_fill_distiller(
name = "SID deaths\n1974-78",
palette = "YlOrRd"
)
ggplot(faithfuld, aes(waiting, eruptions, fill=density)) +
geom_raster() +
scale_x_continuous(name = "Waiting time", expand = c(0,0)) +
scale_y_continuous(name = "Eruption time", expand = c(0,0))
ggplot(faithfuld, aes(waiting, eruptions, fill=density)) +
geom_raster() +
scale_x_continuous(name = "Waiting time", expand = c(0,0)) +
scale_y_continuous(name = "Eruption time", expand = c(0,0)) +
scale_fill_viridis_c(option = "magma")
library(gapminder)
View(gapminder)
t(gapminder)
View(t(gapminder))
library(shiny); runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
library(shiny); runApp('C:/Users/black/My Drive/Teaching/UMD Data350 Data Visualization and Presentation/LABS/shiny/gapminderEDA.r')
runApp('GitHub/dataviz/Gapminder_EDA.R')
setwd("~/GitHub/dataviz")
library(shiny); runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
runApp('Gapminder_EDA.R')
